#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.13
# In conjunction with Tcl version 8.6
#    Aug 24, 2018 12:54:58 PM

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk

    py3 = False
except ImportError:
    import tkinter.ttk as ttk

    py3 = True

import gui_support


def vp_start_gui():
    """Starting point when module is the main routine."""
    global val, w, root
    root = Tk()
    root.resizable(width=False, height=False)
    top = New_Toplevel(root)
    gui_support.init(root, top)
    root.mainloop()


w = None


def create_New_Toplevel(root, *args, **kwargs):
    """Starting point when module is imported by another program."""
    global w, w_win, rt
    rt = root
    w = Toplevel(root)
    top = New_Toplevel(w)
    gui_support.init(w, top, *args, **kwargs)
    return (w, top)


def destroy_New_Toplevel():
    global w
    w.destroy()
    w = None


class New_Toplevel:
    def __init__(self, top=None):

        """This class configures and populates the toplevel window.
           top is the toplevel containing window."""
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9'  # X11 color: 'gray85'
        _ana1color = '#d9d9d9'  # X11 color: 'gray85'
        _ana2color = '#d9d9d9'  # X11 color: 'gray85'

        top.geometry("800x350")
        top.title("MSTR Server/Project Governing Settings.py")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.Organization_Entry = Entry(top)
        self.Organization_Entry.place(x=50.0, y=50.0, height=30
                                      , relwidth=0.29)
        self.Organization_Entry.configure(background="white")
        self.Organization_Entry.configure(disabledforeground="#a3a3a3")
        self.Organization_Entry.configure(font="TkFixedFont")
        self.Organization_Entry.configure(foreground="#000000")
        self.Organization_Entry.configure(highlightbackground="#d9d9d9")
        self.Organization_Entry.configure(highlightcolor="black")
        self.Organization_Entry.configure(insertbackground="black")
        self.Organization_Entry.configure(selectbackground="#c4c4c4")
        self.Organization_Entry.configure(selectforeground="black")

        self.Environment_Name_Entry = Entry(top)
        self.Environment_Name_Entry.place(x=350.0, y=50.0, height=30
                                          , relwidth=0.28)
        self.Environment_Name_Entry.configure(background="white")
        self.Environment_Name_Entry.configure(disabledforeground="#a3a3a3")
        self.Environment_Name_Entry.configure(font="TkFixedFont")
        self.Environment_Name_Entry.configure(foreground="#000000")
        self.Environment_Name_Entry.configure(highlightbackground="#d9d9d9")
        self.Environment_Name_Entry.configure(highlightcolor="black")
        self.Environment_Name_Entry.configure(insertbackground="black")
        self.Environment_Name_Entry.configure(selectbackground="#c4c4c4")
        self.Environment_Name_Entry.configure(selectforeground="black")

        self.Level_Entry = Listbox(top)
        self.Level_Entry.place(x=625.0, y=50.0, height=70.0
                               , width=40.0)
        for item in ["Prod", "QA", "DEV", "UAT"]:
            self.Level_Entry.insert(END, item)

        global level_setting

        self.Level_Entry.configure(background="white")
        self.Level_Entry.configure(disabledforeground="#a3a3a3")
        self.Level_Entry.configure(font="TkFixedFont")
        self.Level_Entry.configure(foreground="#000000")
        self.Level_Entry.configure(highlightbackground="#d9d9d9")
        self.Level_Entry.configure(highlightcolor="black")
        self.Level_Entry.configure(selectbackground="#c4c4c4")
        self.Level_Entry.configure(selectforeground="black")
        self.Level_Entry.configure(width=10)

        self.Level_Label = Label(top)
        self.Level_Label.place(x=600.0, rely=0.03, height=31, width=150)
        self.Level_Label.configure(activebackground="#f9f9f9")
        self.Level_Label.configure(activeforeground="black")
        self.Level_Label.configure(background="#d9d9d9")
        self.Level_Label.configure(disabledforeground="#a3a3a3")
        self.Level_Label.configure(foreground="#000000")
        self.Level_Label.configure(highlightbackground="#d9d9d9")
        self.Level_Label.configure(highlightcolor="black")
        self.Level_Label.configure(text='''Environment Level:''')

        self.EnvironmentName_Label = Label(top)
        self.EnvironmentName_Label.place(x=330.0, y=25, height=25, width=150)
        self.EnvironmentName_Label.configure(activebackground="#f9f9f9")
        self.EnvironmentName_Label.configure(activeforeground="black")
        self.EnvironmentName_Label.configure(background="#d9d9d9")
        self.EnvironmentName_Label.configure(disabledforeground="#a3a3a3")
        self.EnvironmentName_Label.configure(foreground="#000000")
        self.EnvironmentName_Label.configure(highlightbackground="#d9d9d9")
        self.EnvironmentName_Label.configure(highlightcolor="black")
        self.EnvironmentName_Label.configure(text='''Environment Name:''')

        self.Organization_Label = Label(top)
        self.Organization_Label.place(x=25.0, y=25, height=25, width=160)
        self.Organization_Label.configure(activebackground="#f9f9f9")
        self.Organization_Label.configure(activeforeground="black")
        self.Organization_Label.configure(background="#d9d9d9")
        self.Organization_Label.configure(disabledforeground="#a3a3a3")
        self.Organization_Label.configure(foreground="#000000")
        self.Organization_Label.configure(highlightbackground="#d9d9d9")
        self.Organization_Label.configure(highlightcolor="black")
        self.Organization_Label.configure(text='''Organization Name:''')

        self.IPaddress_Label = Label(top)
        self.IPaddress_Label.place(x=30.0, y=120.0, height=31, width=142)
        self.IPaddress_Label.configure(activebackground="#f9f9f9")
        self.IPaddress_Label.configure(activeforeground="black")
        self.IPaddress_Label.configure(background="#d9d9d9")
        self.IPaddress_Label.configure(disabledforeground="#a3a3a3")
        self.IPaddress_Label.configure(foreground="#000000")
        self.IPaddress_Label.configure(highlightbackground="#d9d9d9")
        self.IPaddress_Label.configure(highlightcolor="black")
        self.IPaddress_Label.configure(text='''Server IP address:''')

        self.IP_address_entry = Entry(top)
        self.IP_address_entry.place(x=50.0, y=150.0, height=26
                                    , relwidth=0.29)
        self.IP_address_entry.configure(background="white")
        self.IP_address_entry.configure(disabledforeground="#a3a3a3")
        self.IP_address_entry.configure(font="TkFixedFont")
        self.IP_address_entry.configure(foreground="#000000")
        self.IP_address_entry.configure(highlightbackground="#d9d9d9")
        self.IP_address_entry.configure(highlightcolor="black")
        self.IP_address_entry.configure(insertbackground="black")
        self.IP_address_entry.configure(selectbackground="#c4c4c4")
        self.IP_address_entry.configure(selectforeground="black")

        self.Port_Label = Label(top)
        self.Port_Label.place(x=347.0, y=120.0, height=31, width=39)
        self.Port_Label.configure(activebackground="#f9f9f9")
        self.Port_Label.configure(activeforeground="black")
        self.Port_Label.configure(background="#d9d9d9")
        self.Port_Label.configure(disabledforeground="#a3a3a3")
        self.Port_Label.configure(foreground="#000000")
        self.Port_Label.configure(highlightbackground="#d9d9d9")
        self.Port_Label.configure(highlightcolor="black")
        self.Port_Label.configure(text='''Port:''')

        self.Port_Entry = Entry(top)
        self.Port_Entry.place(x=350.0, y=150.0, height=26, relwidth=0.29)
        self.Port_Entry.configure(background="white")
        self.Port_Entry.configure(disabledforeground="#a3a3a3")
        self.Port_Entry.configure(font="TkFixedFont")
        self.Port_Entry.configure(foreground="#000000")
        self.Port_Entry.configure(highlightbackground="#d9d9d9")
        self.Port_Entry.configure(highlightcolor="black")
        self.Port_Entry.configure(insertbackground="black")
        self.Port_Entry.configure(selectbackground="#c4c4c4")
        self.Port_Entry.configure(selectforeground="black")

        self.menubar = Menu(top, font="TkMenuFont", bg=_bgcolor, fg=_fgcolor)
        top.configure(menu=self.menubar)

        self.Run_button = Button(top)
        self.Run_button.place(x=50.0, y=300.0, height=42, width=46)
        self.Run_button.configure(activebackground="#d9d9d9")
        self.Run_button.configure(activeforeground="#000000")
        self.Run_button.configure(background="#d9d9d9")

        self.Run_button.configure(command=self.start)
        self.Run_button.configure(disabledforeground="#a3a3a3")
        self.Run_button.configure(foreground="#000000")
        self.Run_button.configure(highlightbackground="#d9d9d9")
        self.Run_button.configure(highlightcolor="black")
        self.Run_button.configure(pady="0")
        self.Run_button.configure(text='''Run''')

        self.Exit_button = Button(top)
        self.Exit_button.place(x=150.0, y=300.0, height=42, width=42)
        self.Exit_button.configure(command=gui_support.destroy_window)
        self.Exit_button.configure(activebackground="#d9d9d9")
        self.Exit_button.configure(activeforeground="#000000")
        self.Exit_button.configure(background="#d9d9d9")
        self.Exit_button.configure(disabledforeground="#a3a3a3")
        self.Exit_button.configure(foreground="#000000")
        self.Exit_button.configure(highlightbackground="#d9d9d9")
        self.Exit_button.configure(highlightcolor="black")
        self.Exit_button.configure(pady="0")
        self.Exit_button.configure(text='''Exit''')

        self.UserName_Label = Label(top)
        self.UserName_Label.place(x=35.0, y=220.0, height=31, width=93)
        self.UserName_Label.configure(background="#d9d9d9")
        self.UserName_Label.configure(disabledforeground="#a3a3a3")
        self.UserName_Label.configure(foreground="#000000")
        self.UserName_Label.configure(text='''User Name:''')

        self.Password_Label = Label(top)
        self.Password_Label.place(x=340.0, y=220.0, height=31, width=82)
        self.Password_Label.configure(background="#d9d9d9")
        self.Password_Label.configure(disabledforeground="#a3a3a3")
        self.Password_Label.configure(foreground="#000000")
        self.Password_Label.configure(text='''Password:''')

        self.User_Name_Entry = Entry(top)
        self.User_Name_Entry.place(x=50.0, y=250.0, height=26
                                   , relwidth=0.29)
        self.User_Name_Entry.configure(background="white")
        self.User_Name_Entry.configure(disabledforeground="#a3a3a3")
        self.User_Name_Entry.configure(font="TkFixedFont")
        self.User_Name_Entry.configure(foreground="#000000")
        self.User_Name_Entry.configure(insertbackground="black")

        self.Password_Entry = Entry(top)
        self.Password_Entry.place(x=350.0, y=250.0, height=26, relwidth=0.29)

        self.Password_Entry.configure(background="white")
        self.Password_Entry.configure(disabledforeground="#a3a3a3")
        self.Password_Entry.configure(font="TkFixedFont")
        self.Password_Entry.configure(foreground="#000000")
        self.Password_Entry.configure(insertbackground="black")
        self.Password_Entry.configure(show="*")

        self.OutputFile_Label = Label(top)
        self.OutputFile_Label.place(x=315.0, y=290.0, height=31, width=306)
        self.OutputFile_Label.configure(background="#d9d9d9")
        self.OutputFile_Label.configure(disabledforeground="#a3a3a3")
        self.OutputFile_Label.configure(foreground="#000000")
        self.OutputFile_Label.configure(text='''Output excel file  in local dir(no extension)''')

        self.Output_file_Entry = Entry(top)
        self.Output_file_Entry.place(x=350.0, y=320.0, height=26
                                     , relwidth=0.29)
        self.Output_file_Entry.configure(background="white")
        self.Output_file_Entry.configure(disabledforeground="#a3a3a3")
        self.Output_file_Entry.configure(font="TkFixedFont")
        self.Output_file_Entry.configure(foreground="#000000")
        self.Output_file_Entry.configure(insertbackground="black")

        try:
            for line in open('log.txt'):
                if line.startswith('Output File :'):
                    output_w_ext = (line.split(':')[1]).rstrip()
                    output_prior = output_w_ext.split('.')[0]

                    if output_prior != '':
                        self.Output_file_Entry.delete(0, END)
                        self.Output_file_Entry.insert(0, output_prior)

                elif line.startswith('Level :'):

                    level_prior = (line.split(':')[1]).rstrip()
                    if level_prior != '':

                        levels = ["Prod", "QA", "DEV", "UAT"]
                        for i in range(0, 4, 1):

                            if level_prior == levels[i]:
                                self.Level_Entry.select_set(first=i)


                elif line.startswith('Organization :'):
                    organization_prior = (line.split(':')[1]).rstrip()
                    if organization_prior != '':
                        self.Organization_Entry.delete(0, END)
                        self.Organization_Entry.insert(0, organization_prior)
                elif line.startswith('IP_address :'):
                    ip_prior = (line.split(':')[1]).rstrip()
                    if ip_prior != '':
                        self.IP_address_entry.delete(0, END)
                        self.IP_address_entry.insert(0, ip_prior)

                elif line.startswith('Port :'):
                    port_prior = (line.split(':')[1]).rstrip()
                    if port_prior != '':
                        self.Port_Entry.delete(0, END)
                        self.Port_Entry.insert(0, port_prior)

                elif line.startswith('Environment :'):
                    environment_prior = (line.split(':')[1]).rstrip()
                    if environment_prior != '':
                        self.Environment_Name_Entry.delete(0, END)
                        self.Environment_Name_Entry.insert(0, environment_prior)

                elif line.startswith('MicroStrategy login :'):
                    login_prior = (line.split(':')[1]).rstrip()
                    if login_prior != '':
                        self.User_Name_Entry.delete(0, END)
                        self.User_Name_Entry.insert(0, login_prior)

                elif line.startswith('Password :'):
                    password_prior = (line.split(':')[1]).rstrip()
                    if password_prior == '':
                        self.Password_Entry.delete(0, END)
                        self.Password_Entry.insert(0, '')
                    elif password_prior == 'no password (blank)':
                        self.Password_Entry.delete(0, END)
                        self.Password_Entry.insert(0, '')
                    else:
                        self.Password_Entry.delete(0, END)
                        self.Password_Entry.insert(0, '')

                else:
                    x = 0
        except:
            f = open("log.txt", "a+")
            f.write('\n')
            f.write('no previous log file found, user will input details')
            f.close()

    def start(self):
        import gui_support
        import sys
        import tkMessageBox
        import time
        import os
        from support_funcs import array_work
        from support_funcs import conversion
        global level_setting
        level_setting = self.Level_Entry.get(ANCHOR)
        Environment_Name = self.Environment_Name_Entry.get()
        IP_address = self.IP_address_entry.get()
        Port = self.Port_Entry.get()
        Organization = self.Organization_Entry.get()
        mstrlogin = self.User_Name_Entry.get()
        password = self.Password_Entry.get()
        outputfile = self.Output_file_Entry.get()
        outputfile = outputfile.split('.')[0] + '.txt'

        # print('Level Setting: '+level_setting+'\n'+'Environment Name: '+Environment_Name+'\n'+'IP_address: '+IP_address+'\n'+'Organization Name: '+Organization+'\n'+'Port: '+Port);

        if password == '':
            run_cmd = 'MSTRGoverningSettings.exe -s ' + IP_address + ' -p ' + Port + ' -l ' + mstrlogin + ' -o ' + outputfile
        else:
            run_cmd = 'MSTRGoverningSettings.exe -s ' + IP_address + ' -p ' + Port + ' -l ' + mstrlogin + ' --pw ' + password + ' -o ' + outputfile

        result = os.system(run_cmd + ' > log.txt')

        while not os.path.exists('log.txt'):
            time.sleep(3)

        time.sleep(3)
        if os.path.exists(outputfile):
            # convert text file input from executable to xlsx format

            conversion(outputfile)

            # text_file=outputfile+ '.txt'
            os.remove(outputfile)
            outputfile = outputfile.split('.')[0] + '.xls'
            # convert .xlsx file input from conversion function to the correct column formatting
            array_work(outputfile, level_setting, Environment_Name, Organization)

            tkMessageBox.showinfo("MSTR", "Output .xlsx file created")
            f = open("log.txt", "a+")
            f.write('\n')
            f.write("IP_address :" + IP_address + '\n')
            f.write("Port :" + Port + '\n')
            f.write("MicroStrategy login :" + mstrlogin + '\n')
            f.write("Output File :" + outputfile + '\n')
            f.write("Level :" + level_setting + '\n')
            f.write("Organization :" + Organization + '\n')
            f.write("Environment :" + Environment_Name + '\n')
            if password == '':
                f.write("Password :" + 'no password (blank)' + '\n')
            else:
                f.write("Password :" + password + '\n')
            f.close()
            sys.stdout.close()

            gui_support.destroy_window()
        else:
            f = open("log.txt", "a+")
            f.write('\n')
            f.write("IP_address :" + IP_address + '\n')
            f.write("Port :" + Port + '\n')
            f.write("MicroStrategy login :" + mstrlogin + '\n')
            f.write("Output File :" + outputfile + '\n')
            f.write("Level :" + level_setting + '\n')
            f.write("Organization :" + Organization + '\n')
            f.write("Environment :" + Environment_Name + '\n')

            if password == '':
                f.write("Password :" + 'no password (blank)' + '\n')
            else:
                f.write("Password :" + password + '\n')
            tkMessageBox.showinfo("MSTR", "No configuration file generated, review the log.txt output for errors")
            text_file = outputfile + '.txt'
            os.remove(text_file)

            f.close()
            sys.stdout.close()


if __name__ == '__main__':
    vp_start_gui()
